{"version":3,"file":"static/js/901.f9951ceb.chunk.js","mappings":"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","sources":["common/forms/FormsControls.tsx","webpack://snet/./src/features/dialogs/Dialogs.module.css?f3af","features/dialogs/message/Message.tsx","webpack://snet/./src/features/dialogs/addMessageForm/AddMessageForm.module.css?dac2","features/dialogs/addMessageForm/AddMessageForm.tsx","features/dialogs/dialogItem/DialogItem.tsx","features/dialogs/Dialogs.tsx","features/dialogs/DialogsContainer.tsx","hocs/withAuthRedirect.tsx","utils/validators/validator.tsx","webpack://snet/./src/common/forms/FormControls.module.css?f95e"],"sourcesContent":["import React from 'react';\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\nimport styles from './FormControls.module.css'\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps,\r\n    children?: React.ReactNode\r\n\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    return (\r\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__S8yM6\",\"dialogsItems\":\"Dialogs_dialogsItems__2Nm0g\",\"messagesBlock\":\"Dialogs_messagesBlock__DKdaf\",\"messages\":\"Dialogs_messages__C5GYR\",\"message\":\"Dialogs_message__lmJW9\",\"avatar\":\"Dialogs_avatar__qsf0G\",\"name\":\"Dialogs_name__hPOSk\"};","import React from 'react';\r\nimport styles from './../Dialogs.module.css'\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return (\r\n        <div className={styles.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AddMessageForm_container__DmJ1X\"};","import React, {FC} from 'react';\r\nimport styles from './AddMessageForm.module.css'\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validator';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../../common/forms/FormsControls';\r\n\r\ntype DialogsFormPropsType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm: FC<InjectedFormProps<DialogsFormPropsType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={styles.container}>\r\n                <Field  style={{width:'350px', height:'50px',borderRadius:'10px',padding:'10px'}}\r\n                    component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder={'Enter your message'}\r\n                       row={3}\r\n                />\r\n\r\n                <button  type={'submit'}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<DialogsFormPropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport styles from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {Avatar} from 'antd';\r\nimport {UserOutlined} from '@ant-design/icons';\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogsType) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            {props.avatar ?\r\n                <img className={styles.avatar} src={props.avatar} alt={'avatar'}/>\r\n                : <Avatar icon={<UserOutlined />}/>\r\n            }\r\n            <NavLink to={path}><span className={styles.name}>{props.name}</span></NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport styles from './Dialogs.module.css'\r\nimport {Message, MessageType} from './message/Message';\r\nimport {AddMessageFormRedux} from './addMessageForm/AddMessageForm';\r\nimport {DialogItem, DialogsType} from './dialogItem/DialogItem';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Layout} from 'antd';\r\n\r\ntype DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n    sendMessage: (values: string) => void\r\n    isAuth: boolean\r\n}\r\nconst{Content}=Layout;\r\n\r\nexport const Dialogs = (props: DialogsPageType) => {\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>);\r\n\r\n    let messagesElements = props.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>);\r\n\r\n    let addNewMessage = (values: { newMessageBody: string }) => {\r\n        props.sendMessage(values.newMessageBody);\r\n        values.newMessageBody = '';\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <Content style={{backgroundColor:'#001529',borderRadius:'20px',minWidth:\"50vw\",height:'75vh'}}>\r\n            <div className={styles.messages}>\r\n                <div className={styles.messagesBlock}>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n            </Content>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n/*\r\n\r\nconst {Content} = Layout;\r\nconst {TextArea} = Input;\r\nconst {Meta} = Card;\r\n\r\nconst fakeData = [\r\n    'Anna',\r\n    'Lena',\r\n    'Sveta',\r\n    'Dima',\r\n    'Sergey'\r\n\r\n];\r\n\r\nexport const Dialogs = () => {\r\n    return (\r\n        <div>\r\n            <Row gutter={8}>\r\n                <Col flex={4}>\r\n                    <Content style={{\r\n                        background: '#001529',\r\n                        borderRadius: 5,\r\n                        margin: '10px 16px',\r\n                        padding: 24,\r\n                    }}>\r\n                        <div style={{color: '#d7d7a7'}}>\r\n                            <>\r\n                                <Card style={{width: 300, marginTop: 10, padding: 0, textAlign: 'start'}} >\r\n                                    <Meta\r\n                                        avatar={<Avatar src=\"https://joesch.moe/api/v1/random?key=1\"/>}\r\n                                        title=\"UserName\"\r\n                                        description=\"Hello!\"\r\n                                    />\r\n                                </Card>\r\n\r\n                                <Card style={{width: 300, marginTop: 10, padding: 0, textAlign: 'start'}} >\r\n                                    <Meta\r\n                                        avatar={<Avatar src=\"https://joesch.moe/api/v1/random?key=1\"/>}\r\n                                        title=\"UserName\"\r\n                                        description=\"How are you?\"\r\n                                    />\r\n                                </Card>\r\n                            </>\r\n                        </div>\r\n                        <div style={{display:'flex',marginTop:20}}>\r\n                            <TextArea value={'Write message... '}/>\r\n                            <Button  style={{margin: 5,backgroundColor:'#d7d7a7'}}>Send</Button>\r\n                        </div>\r\n                    </Content>\r\n                </Col>\r\n                <Col flex={1}>\r\n                    <Content style={{\r\n                        background: '#f5f5f5',\r\n                        borderRadius: 5,\r\n                        margin: '10px 16px',\r\n\r\n                    }}>\r\n\r\n                        <List\r\n                            size=\"small\"\r\n                            header={<h1 style={{color: '#001529'}}>Users</h1>}\r\n                            bordered\r\n                            dataSource={fakeData}\r\n                            renderItem={(item) => <List.Item>{item}</List.Item>}\r\n                        />\r\n\r\n                    </Content>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\n*/\r\n","import {DialogsType} from './dialogItem/DialogItem';\r\nimport React from 'react';\r\nimport {MessageType} from './message/Message';\r\nimport {AppDispatch, AppRootStateType} from '../../app/store';\r\nimport {compose} from 'redux';\r\nimport {sendMessageAC} from './dialogs-reducer';\r\nimport {withAuthRedirect} from '../../hocs/withAuthRedirect';\r\nimport {connect} from 'react-redux';\r\nimport {Dialogs} from './Dialogs';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogs: Array<DialogsType>,\r\n    messages: Array<MessageType>,\r\n    isAuth: boolean,\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void,\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: AppDispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppRootStateType>(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs);","import React, {Component,ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppRootStateType} from '../app/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T extends Component>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__4-aEQ\",\"error\":\"FormControls_error__FhzQa\",\"formSummaryError\":\"FormControls_formSummaryError__J-zp3\",\"title\":\"FormControls_title__+kebM\",\"button_save\":\"FormControls_button_save__Zuuoh\"};"],"names":["FormControl","_ref","_ref$meta","meta","touched","error","children","hasError","_jsxs","className","styles","_jsx","Textarea","_ref2","input","restProps","_objectWithoutProperties","_excluded","_objectSpread","Input","_ref3","_excluded2","createField","placeholder","name","validators","component","props","arguments","length","undefined","text","Field","validate","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","style","width","height","borderRadius","padding","required","row","type","DialogItem","path","id","avatar","src","alt","Avatar","icon","UserOutlined","NavLink","to","Content","Layout","compose","withAuthRedirect","connect","state","dialogs","dialogsPage","messages","isAuth","auth","dispatch","sendMessage","newMessageBody","sendMessageAC","dialogsElements","map","d","messagesElements","m","backgroundColor","minWidth","values","Redirect","mapStateToProps","Component","value","maxLength","concat"],"sourceRoot":""}